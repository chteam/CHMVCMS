
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace YouXiArticle.Models
{
    /// <summary>
    /// The DataContext class for the Article database.
    /// </summary>
    public partial class ArticleDataContext : DataContext
    {
        private static MappingSource mappingCache = new AttributeMappingSource();
        
        #region Constructors
        /// <summary>
        /// Initializes the <see cref="ArticleDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        static ArticleDataContext()
        { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        public ArticleDataContext()
            : base(Properties.Settings.Default.ArticleConnectionString, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        [DebuggerNonUserCodeAttribute]
        public ArticleDataContext(string connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        [DebuggerNonUserCodeAttribute]
        public ArticleDataContext(IDbConnection connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public ArticleDataContext(string connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public ArticleDataContext(IDbConnection connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        #endregion
        
        #region Tables
        /// <summary>Represents the dbo.Article table in the underlying database.</summary>
        public Table<Article> Article
        {
            get { return GetTable<Article>(); }
        }
        
        /// <summary>Represents the dbo.ArticleTag table in the underlying database.</summary>
        public Table<ArticleTag> ArticleTag
        {
            get { return GetTable<ArticleTag>(); }
        }
        
        /// <summary>Represents the dbo.Category table in the underlying database.</summary>
        public Table<Category> Category
        {
            get { return GetTable<Category>(); }
        }
        
        /// <summary>Represents the dbo.CategoryUrl table in the underlying database.</summary>
        public Table<CategoryUrl> CategoryUrl
        {
            get { return GetTable<CategoryUrl>(); }
        }
        
        /// <summary>Represents the dbo.Navigation table in the underlying database.</summary>
        public Table<Navigation> Navigation
        {
            get { return GetTable<Navigation>(); }
        }
        
        /// <summary>Represents the dbo.SiteInfo table in the underlying database.</summary>
        public Table<SiteInfo> SiteInfo
        {
            get { return GetTable<SiteInfo>(); }
        }
        
        /// <summary>Represents the dbo.Tag table in the underlying database.</summary>
        public Table<Tag> Tag
        {
            get { return GetTable<Tag>(); }
        }
        
        /// <summary>Represents the dbo.UrlAction table in the underlying database.</summary>
        public Table<UrlAction> UrlAction
        {
            get { return GetTable<UrlAction>(); }
        }
        
        /// <summary>Represents the dbo.UrlTag table in the underlying database.</summary>
        public Table<UrlTag> UrlTag
        {
            get { return GetTable<UrlTag>(); }
        }
        
        #endregion

        #region Functions
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called after this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called before a Article is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertArticle(Article instance);
        /// <summary>Called before a Article is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateArticle(Article instance);
        /// <summary>Called before a Article is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteArticle(Article instance);
        /// <summary>Called before a ArticleTag is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertArticleTag(ArticleTag instance);
        /// <summary>Called before a ArticleTag is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateArticleTag(ArticleTag instance);
        /// <summary>Called before a ArticleTag is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteArticleTag(ArticleTag instance);
        /// <summary>Called before a Category is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertCategory(Category instance);
        /// <summary>Called before a Category is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateCategory(Category instance);
        /// <summary>Called before a Category is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteCategory(Category instance);
        /// <summary>Called before a CategoryUrl is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertCategoryUrl(CategoryUrl instance);
        /// <summary>Called before a CategoryUrl is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateCategoryUrl(CategoryUrl instance);
        /// <summary>Called before a CategoryUrl is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteCategoryUrl(CategoryUrl instance);
        /// <summary>Called before a Navigation is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertNavigation(Navigation instance);
        /// <summary>Called before a Navigation is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateNavigation(Navigation instance);
        /// <summary>Called before a Navigation is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteNavigation(Navigation instance);
        /// <summary>Called before a SiteInfo is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertSiteInfo(SiteInfo instance);
        /// <summary>Called before a SiteInfo is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateSiteInfo(SiteInfo instance);
        /// <summary>Called before a SiteInfo is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteSiteInfo(SiteInfo instance);
        /// <summary>Called before a Tag is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertTag(Tag instance);
        /// <summary>Called before a Tag is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateTag(Tag instance);
        /// <summary>Called before a Tag is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteTag(Tag instance);
        /// <summary>Called before a UrlAction is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertUrlAction(UrlAction instance);
        /// <summary>Called before a UrlAction is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateUrlAction(UrlAction instance);
        /// <summary>Called before a UrlAction is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteUrlAction(UrlAction instance);
        /// <summary>Called before a UrlTag is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertUrlTag(UrlTag instance);
        /// <summary>Called before a UrlTag is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateUrlTag(UrlTag instance);
        /// <summary>Called before a UrlTag is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteUrlTag(UrlTag instance);
        #endregion
    }
}

