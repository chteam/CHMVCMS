
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace YouXiArticle.Models
{
    /// <summary>
    /// The class representing the dbo.Article table.
    /// </summary>
    [Table(Name="dbo.Article")]
    public partial class Article
        : YouXiArticleEntity
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Article"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Article()
        {
            OnCreated();
            _navigation = default(EntityRef<Navigation>);
            _articleTagList = new EntitySet<ArticleTag>(
                new System.Action<ArticleTag>(this.Attach_ArticleTagList),
                new System.Action<ArticleTag>(this.Detach_ArticleTagList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _iD = default(long);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _title;

        /// <summary>
        /// Gets or sets the Title column value.
        /// </summary>
        [Column(Name="Title", Storage="_title", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    OnTitleChanging(value);
                    OnPropertyChanging("Title");
                    _title = value;
                    OnPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }
        
        private string _body;

        /// <summary>
        /// Gets or sets the Body column value.
        /// </summary>
        [Column(Name="Body", Storage="_body", DbType="ntext NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    OnBodyChanging(value);
                    OnPropertyChanging("Body");
                    _body = value;
                    OnPropertyChanged("Body");
                    OnBodyChanged();
                }
            }
        }
        
        private System.DateTime _addTime;

        /// <summary>
        /// Gets or sets the AddTime column value.
        /// </summary>
        [Column(Name="AddTime", Storage="_addTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime AddTime
        {
            get { return _addTime; }
            set
            {
                if (_addTime != value)
                {
                    OnAddTimeChanging(value);
                    OnPropertyChanging("AddTime");
                    _addTime = value;
                    OnPropertyChanged("AddTime");
                    OnAddTimeChanged();
                }
            }
        }
        
        private long _navigationID;

        /// <summary>
        /// Gets or sets the NavigationID column value.
        /// </summary>
        [Column(Name="NavigationID", Storage="_navigationID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long NavigationID
        {
            get { return _navigationID; }
            set
            {
                if (_navigationID != value)
                {
                    if (_navigation.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnNavigationIDChanging(value);
                    OnPropertyChanging("NavigationID");
                    _navigationID = value;
                    OnPropertyChanged("NavigationID");
                    OnNavigationIDChanged();
                }
            }
        }
        
        private string _author;

        /// <summary>
        /// Gets or sets the Author column value.
        /// </summary>
        [Column(Name="Author", Storage="_author", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Author
        {
            get { return _author; }
            set
            {
                if (_author != value)
                {
                    OnAuthorChanging(value);
                    OnPropertyChanging("Author");
                    _author = value;
                    OnPropertyChanged("Author");
                    OnAuthorChanged();
                }
            }
        }
        
        private long _hits;

        /// <summary>
        /// Gets or sets the Hits column value.
        /// </summary>
        [Column(Name="Hits", Storage="_hits", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Hits
        {
            get { return _hits; }
            set
            {
                if (_hits != value)
                {
                    OnHitsChanging(value);
                    OnPropertyChanging("Hits");
                    _hits = value;
                    OnPropertyChanged("Hits");
                    OnHitsChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Navigation> _navigation;

        /// <summary>
        /// Gets or sets the Navigation association.
        /// </summary>
        [Association(Name="FK_Article_Navigation", Storage="_navigation", ThisKey="NavigationID", OtherKey="ID", IsForeignKey=true)]
        public Navigation Navigation
        {
            get { return _navigation.Entity; }
            set
            {
                Navigation previousValue = _navigation.Entity;
                if (previousValue != value || _navigation.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Navigation");
                    if (previousValue != null)
                    {
                        _navigation.Entity = null;
                        previousValue.ArticleList.Remove(this);
                    }
                    _navigation.Entity = value;
                    if (value != null)
                    {
                        value.ArticleList.Add(this);
                        _navigationID = value.ID;
                    }
                    else
                    {
                        _navigationID = default(long);
                    }
                    OnPropertyChanged("Navigation");
                }
            }
        }
        
        private EntitySet<ArticleTag> _articleTagList;
        
        /// <summary>
        /// Gets or sets the ArticleTag association.
        /// </summary>
        [Association(Name="FK_ArticleTag_Article", Storage="_articleTagList", ThisKey="ID", OtherKey="ArticleID")]
        public EntitySet<ArticleTag> ArticleTagList
        {
            get { return _articleTagList; }
            set { _articleTagList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_ArticleTagList(ArticleTag entity)
        {
            OnPropertyChanging(null);
            entity.Article = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_ArticleTagList(ArticleTag entity)
        {
            OnPropertyChanging(null);
            entity.Article = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(long value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Title is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTitleChanging(string value);
        /// <summary>Called after Title has Changed.</summary>
        partial void OnTitleChanged();
        /// <summary>Called when Body is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBodyChanging(string value);
        /// <summary>Called after Body has Changed.</summary>
        partial void OnBodyChanged();
        /// <summary>Called when AddTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddTimeChanging(System.DateTime value);
        /// <summary>Called after AddTime has Changed.</summary>
        partial void OnAddTimeChanged();
        /// <summary>Called when NavigationID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNavigationIDChanging(long value);
        /// <summary>Called after NavigationID has Changed.</summary>
        partial void OnNavigationIDChanged();
        /// <summary>Called when Author is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAuthorChanging(string value);
        /// <summary>Called after Author has Changed.</summary>
        partial void OnAuthorChanged();
        /// <summary>Called when Hits is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnHitsChanging(long value);
        /// <summary>Called after Hits has Changed.</summary>
        partial void OnHitsChanged();
        #endregion
        
    }
}

