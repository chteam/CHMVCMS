
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace YouXiArticle.Models
{
    /// <summary>
    /// The class representing the dbo.Category table.
    /// </summary>
    [Table(Name="dbo.Category")]
    public partial class Category
        : YouXiArticleEntity
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Category()
        {
            OnCreated();
            _siteSiteInfo = default(EntityRef<SiteInfo>);
            _categoryUrlList = new EntitySet<CategoryUrl>(
                new System.Action<CategoryUrl>(this.Attach_CategoryUrlList),
                new System.Action<CategoryUrl>(this.Detach_CategoryUrlList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _iD = default(long);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _title;

        /// <summary>
        /// Gets or sets the Title column value.
        /// </summary>
        [Column(Name="Title", Storage="_title", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    OnTitleChanging(value);
                    OnPropertyChanging("Title");
                    _title = value;
                    OnPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }
        
        private long _categoryType;

        /// <summary>
        /// Gets or sets the CategoryType column value.
        /// </summary>
        [Column(Name="CategoryType", Storage="_categoryType", DbType="bigint NOT NULL", CanBeNull=false)]
        public long CategoryType
        {
            get { return _categoryType; }
            set
            {
                if (_categoryType != value)
                {
                    OnCategoryTypeChanging(value);
                    OnPropertyChanging("CategoryType");
                    _categoryType = value;
                    OnPropertyChanged("CategoryType");
                    OnCategoryTypeChanged();
                }
            }
        }
        
        private long _siteID;

        /// <summary>
        /// Gets or sets the SiteID column value.
        /// </summary>
        [Column(Name="SiteID", Storage="_siteID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long SiteID
        {
            get { return _siteID; }
            set
            {
                if (_siteID != value)
                {
                    if (_siteSiteInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSiteIDChanging(value);
                    OnPropertyChanging("SiteID");
                    _siteID = value;
                    OnPropertyChanged("SiteID");
                    OnSiteIDChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<SiteInfo> _siteSiteInfo;

        /// <summary>
        /// Gets or sets the SiteInfo association.
        /// </summary>
        [Association(Name="FK_Category_SiteInfo", Storage="_siteSiteInfo", ThisKey="SiteID", OtherKey="ID", IsForeignKey=true)]
        public SiteInfo SiteSiteInfo
        {
            get { return _siteSiteInfo.Entity; }
            set
            {
                SiteInfo previousValue = _siteSiteInfo.Entity;
                if (previousValue != value || _siteSiteInfo.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("SiteSiteInfo");
                    if (previousValue != null)
                    {
                        _siteSiteInfo.Entity = null;
                        previousValue.SiteCategoryList.Remove(this);
                    }
                    _siteSiteInfo.Entity = value;
                    if (value != null)
                    {
                        value.SiteCategoryList.Add(this);
                        _siteID = value.ID;
                    }
                    else
                    {
                        _siteID = default(long);
                    }
                    OnPropertyChanged("SiteSiteInfo");
                }
            }
        }
        
        private EntitySet<CategoryUrl> _categoryUrlList;
        
        /// <summary>
        /// Gets or sets the CategoryUrl association.
        /// </summary>
        [Association(Name="FK_CategoryUrl_Category", Storage="_categoryUrlList", ThisKey="ID", OtherKey="CategoryID")]
        public EntitySet<CategoryUrl> CategoryUrlList
        {
            get { return _categoryUrlList; }
            set { _categoryUrlList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_CategoryUrlList(CategoryUrl entity)
        {
            OnPropertyChanging(null);
            entity.Category = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_CategoryUrlList(CategoryUrl entity)
        {
            OnPropertyChanging(null);
            entity.Category = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(long value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Title is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTitleChanging(string value);
        /// <summary>Called after Title has Changed.</summary>
        partial void OnTitleChanged();
        /// <summary>Called when CategoryType is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCategoryTypeChanging(long value);
        /// <summary>Called after CategoryType has Changed.</summary>
        partial void OnCategoryTypeChanged();
        /// <summary>Called when SiteID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSiteIDChanging(long value);
        /// <summary>Called after SiteID has Changed.</summary>
        partial void OnSiteIDChanged();
        #endregion
        
    }
}

